package tests

// Code generated by ../../bin/passThroughWidget - DO NOT EDIT.

import (
	"github.com/barbell-math/util/src/hash"
	"github.com/barbell-math/util/src/widgets"
)

// Returns true if l equals r. Uses the Eq operator provided by the
// widgets.BuiltinInt widget internally.
func (_ *PassThroughWidgetArithAndPartialOrderTest) Eq(
	l *PassThroughWidgetArithAndPartialOrderTest,
	r *PassThroughWidgetArithAndPartialOrderTest,
) bool {
	var tmp widgets.BuiltinInt
	return tmp.Eq((*int)(l), (*int)(r))
}

// Returns a hash to represent other. The hash that is returned will be supplied
// by the widgets.BuiltinInt widget internally.
func (_ *PassThroughWidgetArithAndPartialOrderTest) Hash(
	other *PassThroughWidgetArithAndPartialOrderTest,
) hash.Hash {
	var tmp widgets.BuiltinInt
	return tmp.Hash((*int)(other))
}

// Zeros the supplied value. The operation that is performed will be determined
// by the widgets.BuiltinInt widget internally.
func (_ *PassThroughWidgetArithAndPartialOrderTest) Zero(
	other *PassThroughWidgetArithAndPartialOrderTest,
) {
	var tmp widgets.BuiltinInt
	tmp.Zero((*int)(other))
}

// Returns true if l is less than r. Uses the Lt operator provided by the
// widgets.BuiltinInt widget internally.
func (_ *PassThroughWidgetArithAndPartialOrderTest) Lt(
	l *PassThroughWidgetArithAndPartialOrderTest,
	r *PassThroughWidgetArithAndPartialOrderTest,
) bool {
	var tmp widgets.BuiltinInt
	return tmp.Lt((*int)(l), (*int)(r))
}

// Returns the zero value for the underlying type. The value that is performed
// will be determined by the widgets.BuiltinInt widget internally.
func (_ *PassThroughWidgetArithAndPartialOrderTest) ZeroVal() PassThroughWidgetArithAndPartialOrderTest {
	var tmp widgets.BuiltinInt
	return (PassThroughWidgetArithAndPartialOrderTest)(tmp.ZeroVal())
}

// Returns the value that represent "1" for the underlying type. The value that
// is performed will be determined by the widgets.BuiltinInt widget internally.
func (_ *PassThroughWidgetArithAndPartialOrderTest) UnitVal() PassThroughWidgetArithAndPartialOrderTest {
	var tmp widgets.BuiltinInt
	return (PassThroughWidgetArithAndPartialOrderTest)(tmp.ZeroVal())
}

// Negates the value that is supplied to it. The value that is returned will be
// determined by the widgets.BuiltinInt widget internally.
func (_ *PassThroughWidgetArithAndPartialOrderTest) Neg(
	v *PassThroughWidgetArithAndPartialOrderTest,
) {
	var tmp widgets.BuiltinInt
	tmp.Neg((*int)(v))
}

// Adds l and r and places the results in res. The value that is returned will
// be determined by the widgets.BuiltinInt widget internally.
func (_ *PassThroughWidgetArithAndPartialOrderTest) Add(
	res *PassThroughWidgetArithAndPartialOrderTest,
	l *PassThroughWidgetArithAndPartialOrderTest,
	r *PassThroughWidgetArithAndPartialOrderTest,
) {
	var tmp widgets.BuiltinInt
	tmp.Add(
		(*int)(res),
		(*int)(l),
		(*int)(r),
	)
}

// Subtracts l and r and places the results in res. The value that is returned
// will be determined by the widgets.BuiltinInt widget internally.
func (_ *PassThroughWidgetArithAndPartialOrderTest) Sub(
	res *PassThroughWidgetArithAndPartialOrderTest,
	l *PassThroughWidgetArithAndPartialOrderTest,
	r *PassThroughWidgetArithAndPartialOrderTest,
) {
	var tmp widgets.BuiltinInt
	tmp.Sub(
		(*int)(res),
		(*int)(l),
		(*int)(r),
	)
}

// Multiplys l and r and places the results in res. The value that is returned
// will be determined by the widgets.BuiltinInt widget internally.
func (_ *PassThroughWidgetArithAndPartialOrderTest) Mul(
	res *PassThroughWidgetArithAndPartialOrderTest,
	l *PassThroughWidgetArithAndPartialOrderTest,
	r *PassThroughWidgetArithAndPartialOrderTest,
) {
	var tmp widgets.BuiltinInt
	tmp.Mul(
		(*int)(res),
		(*int)(l),
		(*int)(r),
	)
}

// Divides l and r and places the results in res. The value that is returned
// will be determined by the widgets.BuiltinInt widget internally.
func (_ *PassThroughWidgetArithAndPartialOrderTest) Div(
	res *PassThroughWidgetArithAndPartialOrderTest,
	l *PassThroughWidgetArithAndPartialOrderTest,
	r *PassThroughWidgetArithAndPartialOrderTest,
) {
	var tmp widgets.BuiltinInt
	tmp.Div(
		(*int)(res),
		(*int)(l),
		(*int)(r),
	)
}
