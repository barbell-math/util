package csv

// Code generated by ../bin/flagEnum - DO NOT EDIT.
import (
	"errors"
	"fmt"
)

var (
	InvalidOptionsFlag               = errors.New("Invalid optionsFlag")
	OPTIONS_FLAG       []optionsFlag = []optionsFlag{
		hasHeaders,
		ignoreHeaders,
		useStructTags,
		writeHeaders,
		headersSupplied,
		writeZeroValues,
		unknownOptionsFlag,
	}
)

func DefaultOptionsFlag() optionsFlag {
	return 0 | hasHeaders | useStructTags | writeHeaders
}

func (o optionsFlag) String() string {
	switch o {
	case hasHeaders:
		return "hasHeaders"
	case ignoreHeaders:
		return "ignoreHeaders"
	case useStructTags:
		return "useStructTags"
	case writeHeaders:
		return "writeHeaders"
	case headersSupplied:
		return "headersSupplied"
	case writeZeroValues:
		return "writeZeroValues"
	case unknownOptionsFlag:
		return "unknownOptionsFlag"

	default:
		return "unknownOptionsFlag"
	}
}

func (o *optionsFlag) FromString(s string) error {
	switch s {

	case "hasHeaders":
		*o = hasHeaders
		return nil

	case "ignoreHeaders":
		*o = ignoreHeaders
		return nil

	case "useStructTags":
		*o = useStructTags
		return nil

	case "writeHeaders":
		*o = writeHeaders
		return nil

	case "headersSupplied":
		*o = headersSupplied
		return nil

	case "writeZeroValues":
		*o = writeZeroValues
		return nil

	case "unknownOptionsFlag":
		*o = unknownOptionsFlag
		return nil

	default:
		*o = unknownOptionsFlag
		return fmt.Errorf("%w: %s", InvalidOptionsFlag, s)
	}
}

// Returns the supplied flags status
func (o optionsFlag) GetFlag(flag optionsFlag) bool {
	return o&flag > 0
}

// Description: set to true if the incoming iterator stream has
// headers in the first row
//
// Used by: [ToStructs]
//
// Default: true
//
//gen:flagEnum string hasHeaders
func (o optionsFlag) HasHeaders(b bool) optionsFlag {
	if b {
		o |= hasHeaders
	} else {
		o &= ^hasHeaders
	}
	return o
}

// Description: set to true to skip the headers from the incoming
// iterator stream and instead determine field ordering by the order of
// the fields in the struct.
//
// Used by: [ToStructs]
//
// Default: false
//
//gen:flagEnum string ignoreHeaders
func (o optionsFlag) IgnoreHeaders(b bool) optionsFlag {
	if b {
		o |= ignoreHeaders
	} else {
		o &= ^ignoreHeaders
	}
	return o
}

// Description: set to true to use struct field tags instead of the
// field name when a tag is present and has the same name as defined by
// the structTagName option
//
// Used by: [ToStructs], [FromStructs]
//
// Default: true
//
//gen:flagEnum string useStructTags
func (o optionsFlag) UseStructTags(b bool) optionsFlag {
	if b {
		o |= useStructTags
	} else {
		o &= ^useStructTags
	}
	return o
}

// Description: set to true to write the headers to the file
//
// Used by: [FromStructs]
//
// Default: true
//
//gen:flagEnum string writeHeaders
func (o optionsFlag) WriteHeaders(b bool) optionsFlag {
	if b {
		o |= writeHeaders
	} else {
		o &= ^writeHeaders
	}
	return o
}

// Description: whether or not to write zero-values to the csv file. If false,
// any zero values will be left as blank fields.
//
// Used by: [FromStructs]
//
// Default: false
//
//gen:flagEnum string writeZeroValues
func (o optionsFlag) WriteZeroValues(b bool) optionsFlag {
	if b {
		o |= writeZeroValues
	} else {
		o &= ^writeZeroValues
	}
	return o
}
