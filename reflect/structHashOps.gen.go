package reflect

// Code generated by ../bin/optionsFlags - DO NOT EDIT.
import ()

// Returns a new structHashOps struct initialized with the default values.
func NewStructHashOps() *structHashOps {
	return &structHashOps{
		flags: includeMapVals | includeArrayVals | includeSliceVals | followPntrs,
	}
}

func (o *structHashOps) getFlag(flag optionsFlag) bool {
	return o.flags&flag > 0
}

// Description: set to true if the hash value should be calculated by
// following pointer values rather than using the pointers value itself
//
// Used by: [ToStructs]
//
// Default: true
func (o *structHashOps) FollowPntrs(b bool) *structHashOps {
	if b {
		o.flags |= followPntrs
	} else {
		o.flags &= ^followPntrs
	}
	return o
}

// Description: set to true if the hash value should be calculated by
// following interface values rather than using the interface value itself
//
// Used by: [ToStructs]
//
// Default: true
func (o *structHashOps) FollowInterface(b bool) *structHashOps {
	if b {
		o.flags |= followInterface
	} else {
		o.flags &= ^followInterface
	}
	return o
}

// Description: set to true to include map key value pairs in the hash
// calculation
//
// Used by: [ToStructs]
//
// Default: true
func (o *structHashOps) IncludeMapVals(b bool) *structHashOps {
	if b {
		o.flags |= includeMapVals
	} else {
		o.flags &= ^includeMapVals
	}
	return o
}

// Description: set to true to include slice values in the hash
// calculation
//
// Used by: [ToStructs]
//
// Default: true
func (o *structHashOps) IncludeSliceVals(b bool) *structHashOps {
	if b {
		o.flags |= includeSliceVals
	} else {
		o.flags &= ^includeSliceVals
	}
	return o
}

// Description: set to true to include array values in the hash
// calculation
//
// Used by: [ToStructs]
//
// Default: true
func (o *structHashOps) IncludeArrayVals(b bool) *structHashOps {
	if b {
		o.flags |= includeArrayVals
	} else {
		o.flags &= ^includeArrayVals
	}
	return o
}
