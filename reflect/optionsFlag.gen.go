package reflect

// Code generated by ../bin/flagEnum - DO NOT EDIT.
import (
	"errors"
	"fmt"
)

var (
	InvalidOptionsFlag               = errors.New("Invalid optionsFlag")
	OPTIONS_FLAG       []optionsFlag = []optionsFlag{
		followPntrs,
		followInterface,
		includeMapVals,
		includeSliceVals,
		includeArrayVals,
		unknownOptionsFlag,
	}
)

func DefaultOptionsFlag() optionsFlag {
	return includeMapVals | includeArrayVals | includeSliceVals | followPntrs
}

func (o optionsFlag) String() string {
	switch o {
	case followPntrs:
		return "followPntrs"
	case followInterface:
		return "followInterface"
	case includeMapVals:
		return "includeMapVals"
	case includeSliceVals:
		return "includeSliceVals"
	case includeArrayVals:
		return "includeArrayVals"
	case unknownOptionsFlag:
		return "unknownOptionsFlag"

	default:
		return "unknownOptionsFlag"
	}
}

func (o *optionsFlag) FromString(s string) error {
	switch s {

	case "followPntrs":
		*o = followPntrs
		return nil

	case "followInterface":
		*o = followInterface
		return nil

	case "includeMapVals":
		*o = includeMapVals
		return nil

	case "includeSliceVals":
		*o = includeSliceVals
		return nil

	case "includeArrayVals":
		*o = includeArrayVals
		return nil

	case "unknownOptionsFlag":
		*o = unknownOptionsFlag
		return nil

	default:
		*o = unknownOptionsFlag
		return fmt.Errorf("%w: %s", InvalidOptionsFlag, s)
	}
}

// Returns the supplied flags status
func (o optionsFlag) GetFlag(flag optionsFlag) bool {
	return o&flag > 0
}

// Description: set to true if the hash value should be calculated by
// following pointer values rather than using the pointers value itself
//
// Used by: [ToStructs]
//
// Default: true
//
//gen:flagEnum string followPntrs
func (o optionsFlag) FollowPntrs(b bool) optionsFlag {
	if b {
		o |= followPntrs
	} else {
		o &= ^followPntrs
	}
	return o
}

// Description: set to true if the hash value should be calculated by
// following interface values rather than using the interface value itself
//
// Used by: [ToStructs]
//
// Default: true
//
//gen:flagEnum string followInterface
func (o optionsFlag) FollowInterface(b bool) optionsFlag {
	if b {
		o |= followInterface
	} else {
		o &= ^followInterface
	}
	return o
}

// Description: set to true to include map key value pairs in the hash
// calculation
//
// Used by: [ToStructs]
//
// Default: true
//
//gen:flagEnum string includeMapVals
func (o optionsFlag) IncludeMapVals(b bool) optionsFlag {
	if b {
		o |= includeMapVals
	} else {
		o &= ^includeMapVals
	}
	return o
}

// Description: set to true to include slice values in the hash
// calculation
//
// Used by: [ToStructs]
//
// Default: true
//
//gen:flagEnum string includeSliceVals
func (o optionsFlag) IncludeSliceVals(b bool) optionsFlag {
	if b {
		o |= includeSliceVals
	} else {
		o &= ^includeSliceVals
	}
	return o
}

// Description: set to true to include array values in the hash
// calculation
//
// Used by: [ToStructs]
//
// Default: true
//
//gen:flagEnum string includeArrayVals
func (o optionsFlag) IncludeArrayVals(b bool) optionsFlag {
	if b {
		o |= includeArrayVals
	} else {
		o &= ^includeArrayVals
	}
	return o
}
