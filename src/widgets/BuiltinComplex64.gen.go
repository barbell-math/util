package widgets

// Code generated by ../../bin/widgetInterfaceImpl - DO NOT EDIT.

import (
	"github.com/barbell-math/util/src/hash"

	"github.com/barbell-math/util/src/math/basic"
)

var ()

// A widget to represent the built-in complex64 type
type (
	BuiltinComplex64 struct{}
)

// Returns true if both complex64's are equal. Uses the standard == operator internally.
func (_ BuiltinComplex64) Eq(l *complex64, r *complex64) bool {
	return *l == *r
}

// Provides a hash function for the value that it is wrapping.
func (_ BuiltinComplex64) Hash(v *complex64) hash.Hash {
	return hash.Hash(basic.LossyConv[float32, int32](basic.RealPart[complex64, float32](*v))).
		Combine(hash.Hash(basic.LossyConv[float32, int32](basic.ImaginaryPart[complex64, float32](*v))))

}

// Zeros the supplied value.
func (_ BuiltinComplex64) Zero(other *complex64) {
	*other = (complex64)(0)
}

// Returns the zero value for the complex64 type.
func (_ BuiltinComplex64) ZeroVal() complex64 {
	return complex64(0)
}

// Returns the unit value for the complex64 type.
func (_ BuiltinComplex64) UnitVal() complex64 {
	return complex64(1)
}

// Negates v, updating the value that v points to.
func (_ BuiltinComplex64) Neg(v *complex64) {
	*v = -(*v)
}

// Adds l to r, placing the result in the value that res points to.
func (_ BuiltinComplex64) Add(res *complex64, l *complex64, r *complex64) {
	*res = *l + *r
}

// Subtracts l to r, placing the result in the value that res points to.
func (_ BuiltinComplex64) Sub(res *complex64, l *complex64, r *complex64) {
	*res = *l - *r
}

// Multiplies l to r, placing the result in the value that res points to.
func (_ BuiltinComplex64) Mul(res *complex64, l *complex64, r *complex64) {
	*res = *l * *r
}

// Divides l to r, placing the result in the value that res points to.
func (_ BuiltinComplex64) Div(res *complex64, l *complex64, r *complex64) {
	*res = *l / *r
}
