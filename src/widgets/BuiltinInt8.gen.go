package widgets

// Code generated by ../bin/widgetInterfaceImpl - DO NOT EDIT.

import (
	"github.com/barbell-math/util/src/hash"
)

var ()

// A widget to represent the built-in int8 type
type (
	BuiltinInt8 struct{}
)

// Returns true if both int8's are equal. Uses the standard == operator internally.
func (_ BuiltinInt8) Eq(l *int8, r *int8) bool {
	return *l == *r
}

// Provides a hash function for the value that it is wrapping.
func (_ BuiltinInt8) Hash(v *int8) hash.Hash {
	return hash.Hash(*v)
}

// Zeros the supplied value.
func (_ BuiltinInt8) Zero(other *int8) {
	*other = (int8)(0)
}

// Returns true if l<r. Uses the standard < operator internally.
func (_ BuiltinInt8) Lt(l *int8, r *int8) bool {
	return *l < *r
}

// Returns the zero value for the int8 type.
func (_ BuiltinInt8) ZeroVal() int8 {
	return int8(0)
}

// Returns the unit value for the int8 type.
func (_ BuiltinInt8) UnitVal() int8 {
	return int8(1)
}

// Negates v, updating the value that v points to.
func (_ BuiltinInt8) Neg(v *int8) {
	*v = -(*v)
}

// Adds l to r, placing the result in the value that res points to.
func (_ BuiltinInt8) Add(res *int8, l *int8, r *int8) {
	*res = *l + *r
}

// Subtracts l to r, placing the result in the value that res points to.
func (_ BuiltinInt8) Sub(res *int8, l *int8, r *int8) {
	*res = *l - *r
}

// Multiplies l to r, placing the result in the value that res points to.
func (_ BuiltinInt8) Mul(res *int8, l *int8, r *int8) {
	*res = *l * *r
}

// Divides l to r, placing the result in the value that res points to.
func (_ BuiltinInt8) Div(res *int8, l *int8, r *int8) {
	*res = *l / *r
}
