package widgets

// Code generated by ../bin/widgetInterfaceImpl - DO NOT EDIT.

import (
	"github.com/barbell-math/util/src/hash"
)

var ()

// A widget to represent the built-in uint16 type
type (
	BuiltinUint16 struct{}
)

// Returns true if both uint16's are equal. Uses the standard == operator internally.
func (_ BuiltinUint16) Eq(l *uint16, r *uint16) bool {
	return *l == *r
}

// Provides a hash function for the value that it is wrapping.
func (_ BuiltinUint16) Hash(v *uint16) hash.Hash {
	return hash.Hash(*v)
}

// Zeros the supplied value.
func (_ BuiltinUint16) Zero(other *uint16) {
	*other = (uint16)(0)
}

// Returns true if l<r. Uses the standard < operator internally.
func (_ BuiltinUint16) Lt(l *uint16, r *uint16) bool {
	return *l < *r
}

// Returns the zero value for the uint16 type.
func (_ BuiltinUint16) ZeroVal() uint16 {
	return uint16(0)
}

// Returns the unit value for the uint16 type.
func (_ BuiltinUint16) UnitVal() uint16 {
	return uint16(1)
}

// Negates v, updating the value that v points to.
func (_ BuiltinUint16) Neg(v *uint16) {
	*v = -(*v)
}

// Adds l to r, placing the result in the value that res points to.
func (_ BuiltinUint16) Add(res *uint16, l *uint16, r *uint16) {
	*res = *l + *r
}

// Subtracts l to r, placing the result in the value that res points to.
func (_ BuiltinUint16) Sub(res *uint16, l *uint16, r *uint16) {
	*res = *l - *r
}

// Multiplies l to r, placing the result in the value that res points to.
func (_ BuiltinUint16) Mul(res *uint16, l *uint16, r *uint16) {
	*res = *l * *r
}

// Divides l to r, placing the result in the value that res points to.
func (_ BuiltinUint16) Div(res *uint16, l *uint16, r *uint16) {
	*res = *l / *r
}
