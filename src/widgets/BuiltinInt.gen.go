package widgets

// Code generated by ../../bin/widgetInterfaceImpl - DO NOT EDIT.

import (
	"github.com/barbell-math/util/src/hash"
)

var ()

// A widget to represent the built-in int type
type (
	BuiltinInt struct{}
)

// Returns true if both int's are equal. Uses the standard == operator internally.
func (_ BuiltinInt) Eq(l *int, r *int) bool {
	return *l == *r
}

// Provides a hash function for the value that it is wrapping.
func (_ BuiltinInt) Hash(v *int) hash.Hash {
	return hash.Hash(*v)
}

// Zeros the supplied value.
func (_ BuiltinInt) Zero(other *int) {
	*other = (int)(0)
}

// Returns true if l<r. Uses the standard < operator internally.
func (_ BuiltinInt) Lt(l *int, r *int) bool {
	return *l < *r
}

// Returns the zero value for the int type.
func (_ BuiltinInt) ZeroVal() int {
	return int(0)
}

// Returns the unit value for the int type.
func (_ BuiltinInt) UnitVal() int {
	return int(1)
}

// Negates v, updating the value that v points to.
func (_ BuiltinInt) Neg(v *int) {
	*v = -(*v)
}

// Adds l to r, placing the result in the value that res points to.
func (_ BuiltinInt) Add(res *int, l *int, r *int) {
	*res = *l + *r
}

// Subtracts l to r, placing the result in the value that res points to.
func (_ BuiltinInt) Sub(res *int, l *int, r *int) {
	*res = *l - *r
}

// Multiplies l to r, placing the result in the value that res points to.
func (_ BuiltinInt) Mul(res *int, l *int, r *int) {
	*res = *l * *r
}

// Divides l to r, placing the result in the value that res points to.
func (_ BuiltinInt) Div(res *int, l *int, r *int) {
	*res = *l / *r
}
