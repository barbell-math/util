package widgets

// Code generated by ../bin/widgetInterfaceImpl - DO NOT EDIT.

import (
	"github.com/barbell-math/util/src/hash"
)

var ()

// A widget to represent the built-in byte type
type (
	BuiltinByte struct{}
)

// Returns true if both byte's are equal. Uses the standard == operator internally.
func (_ BuiltinByte) Eq(l *byte, r *byte) bool {
	return *l == *r
}

// Provides a hash function for the value that it is wrapping.
func (_ BuiltinByte) Hash(v *byte) hash.Hash {
	return hash.Hash(*v)
}

// Zeros the supplied value.
func (_ BuiltinByte) Zero(other *byte) {
	*other = (byte)(0)
}

// Returns true if l<r. Uses the standard < operator internally.
func (_ BuiltinByte) Lt(l *byte, r *byte) bool {
	return *l < *r
}

// Returns the zero value for the byte type.
func (_ BuiltinByte) ZeroVal() byte {
	return byte(0)
}

// Returns the unit value for the byte type.
func (_ BuiltinByte) UnitVal() byte {
	return byte(1)
}

// Negates v, updating the value that v points to.
func (_ BuiltinByte) Neg(v *byte) {
	*v = -(*v)
}

// Adds l to r, placing the result in the value that res points to.
func (_ BuiltinByte) Add(res *byte, l *byte, r *byte) {
	*res = *l + *r
}

// Subtracts l to r, placing the result in the value that res points to.
func (_ BuiltinByte) Sub(res *byte, l *byte, r *byte) {
	*res = *l - *r
}

// Multiplies l to r, placing the result in the value that res points to.
func (_ BuiltinByte) Mul(res *byte, l *byte, r *byte) {
	*res = *l * *r
}

// Divides l to r, placing the result in the value that res points to.
func (_ BuiltinByte) Div(res *byte, l *byte, r *byte) {
	*res = *l / *r
}
