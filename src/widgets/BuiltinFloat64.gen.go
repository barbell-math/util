package widgets

// Code generated by ../../bin/widgetInterfaceImpl - DO NOT EDIT.

import (
	"github.com/barbell-math/util/src/hash"

	"unsafe"
)

var ()

// A widget to represent the built-in float64 type
type (
	BuiltinFloat64 struct{}
)

// Returns true if both float64's are equal. Uses the standard == operator internally.
func (_ BuiltinFloat64) Eq(l *float64, r *float64) bool {
	return *l == *r
}

// Provides a hash function for the value that it is wrapping.
func (_ BuiltinFloat64) Hash(v *float64) hash.Hash {
	return hash.Hash(*(*uint64)(unsafe.Pointer(v)))
}

// Zeros the supplied value.
func (_ BuiltinFloat64) Zero(other *float64) {
	*other = (float64)(0)
}

// Returns true if l<r. Uses the standard < operator internally.
func (_ BuiltinFloat64) Lt(l *float64, r *float64) bool {
	return *l < *r
}

// Returns the zero value for the float64 type.
func (_ BuiltinFloat64) ZeroVal() float64 {
	return float64(0)
}

// Returns the unit value for the float64 type.
func (_ BuiltinFloat64) UnitVal() float64 {
	return float64(1)
}

// Negates v, updating the value that v points to.
func (_ BuiltinFloat64) Neg(v *float64) {
	*v = -(*v)
}

// Adds l to r, placing the result in the value that res points to.
func (_ BuiltinFloat64) Add(res *float64, l *float64, r *float64) {
	*res = *l + *r
}

// Subtracts l to r, placing the result in the value that res points to.
func (_ BuiltinFloat64) Sub(res *float64, l *float64, r *float64) {
	*res = *l - *r
}

// Multiplies l to r, placing the result in the value that res points to.
func (_ BuiltinFloat64) Mul(res *float64, l *float64, r *float64) {
	*res = *l * *r
}

// Divides l to r, placing the result in the value that res points to.
func (_ BuiltinFloat64) Div(res *float64, l *float64, r *float64) {
	*res = *l / *r
}
