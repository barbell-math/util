package csv

// Code generated by ../../bin/enum - DO NOT EDIT.
import (
	"errors"
	"fmt"
)

var (
	InvalidOptionsFlag               = errors.New("Invalid optionsFlag")
	OPTIONS_FLAG       []optionsFlag = []optionsFlag{
		hasHeaders,
		ignoreHeaders,
		useStructTags,
		writeHeaders,
		headersSupplied,
		writeZeroValues,
		unknownOptionsFlag,
	}
)

func NewOptionsFlag() optionsFlag {
	return 0 | hasHeaders | useStructTags | writeHeaders
}

func (o optionsFlag) Value() optionsFlag {
	return o
}

func (o optionsFlag) Valid() error {
	switch o {

	case hasHeaders:
		return nil

	case ignoreHeaders:
		return nil

	case useStructTags:
		return nil

	case writeHeaders:
		return nil

	case headersSupplied:
		return nil

	case writeZeroValues:
		return nil

	case unknownOptionsFlag:
		return nil

	default:
		return InvalidOptionsFlag
	}
}

func (o optionsFlag) String() string {
	switch o {
	case hasHeaders:
		return "hasHeaders"
	case ignoreHeaders:
		return "ignoreHeaders"
	case useStructTags:
		return "useStructTags"
	case writeHeaders:
		return "writeHeaders"
	case headersSupplied:
		return "headersSupplied"
	case writeZeroValues:
		return "writeZeroValues"
	case unknownOptionsFlag:
		return "unknownOptionsFlag"

	default:
		return "unknownOptionsFlag"
	}
}

func (o optionsFlag) MarshalJSON() ([]byte, error) {
	switch o {

	case hasHeaders:
		return []byte("hasHeaders"), nil

	case ignoreHeaders:
		return []byte("ignoreHeaders"), nil

	case useStructTags:
		return []byte("useStructTags"), nil

	case writeHeaders:
		return []byte("writeHeaders"), nil

	case headersSupplied:
		return []byte("headersSupplied"), nil

	case writeZeroValues:
		return []byte("writeZeroValues"), nil

	case unknownOptionsFlag:
		return []byte("unknownOptionsFlag"), nil

	default:
		return []byte("unknownOptionsFlag"), InvalidOptionsFlag
	}
}

func (o *optionsFlag) FromString(s string) error {
	switch s {

	case "hasHeaders":
		*o = hasHeaders
		return nil

	case "ignoreHeaders":
		*o = ignoreHeaders
		return nil

	case "useStructTags":
		*o = useStructTags
		return nil

	case "writeHeaders":
		*o = writeHeaders
		return nil

	case "headersSupplied":
		*o = headersSupplied
		return nil

	case "writeZeroValues":
		*o = writeZeroValues
		return nil

	case "unknownOptionsFlag":
		*o = unknownOptionsFlag
		return nil

	default:
		*o = unknownOptionsFlag
		return fmt.Errorf("%w: %s", InvalidOptionsFlag, s)
	}
}

func (o *optionsFlag) UnmarshalJSON(b []byte) error {
	switch string(b) {

	case "hasHeaders":
		*o = hasHeaders
		return nil

	case "ignoreHeaders":
		*o = ignoreHeaders
		return nil

	case "useStructTags":
		*o = useStructTags
		return nil

	case "writeHeaders":
		*o = writeHeaders
		return nil

	case "headersSupplied":
		*o = headersSupplied
		return nil

	case "writeZeroValues":
		*o = writeZeroValues
		return nil

	case "unknownOptionsFlag":
		*o = unknownOptionsFlag
		return nil

	default:
		*o = unknownOptionsFlag
		return fmt.Errorf("%w: %s", InvalidOptionsFlag, string(b))
	}
}
