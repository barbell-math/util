package containers

// Code generated by ../../bin/containerInterfaceTests - DO NOT EDIT.
import (
	"github.com/barbell-math/util/src/container/dynamicContainers"
	"github.com/barbell-math/util/src/container/tests"
	"testing"
)

func HashSetToSetInterfaceFactory(capacity int) dynamicContainers.Set[int] {
	v := generateHashSet(capacity)
	var rv dynamicContainers.Set[int] = &v
	return rv
}

func TestHashSet_DynSetInterfaceSyncableInterface(t *testing.T) {
	tests.DynSetInterfaceSyncableInterface(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceAddressableInterface(t *testing.T) {
	tests.DynSetInterfaceAddressableInterface(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceLengthInterface(t *testing.T) {
	tests.DynSetInterfaceLengthInterface(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceClearInterface(t *testing.T) {
	tests.DynSetInterfaceClearInterface(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceWriteUniqueOpsInterface(t *testing.T) {
	tests.DynSetInterfaceWriteUniqueOpsInterface(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceReadOpsInterface(t *testing.T) {
	tests.DynSetInterfaceReadOpsInterface(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceDeleteOpsInterface(t *testing.T) {
	tests.DynSetInterfaceDeleteOpsInterface(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_ReadDynSetInterface(t *testing.T) {
	tests.ReadDynSetInterface(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_WriteDynSetInterface(t *testing.T) {
	tests.WriteDynSetInterface(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceInterface(t *testing.T) {
	tests.DynSetInterfaceInterface(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceStaticCapacityInterface(t *testing.T) {
	tests.DynSetInterfaceStaticCapacityInterface(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceVals(t *testing.T) {
	tests.DynSetInterfaceVals(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceValPntrs(t *testing.T) {
	tests.DynSetInterfaceValPntrs(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceContainsPntr(t *testing.T) {
	tests.DynSetInterfaceContainsPntr(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceGetUnique(t *testing.T) {
	tests.DynSetInterfaceGetUnique(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceContains(t *testing.T) {
	tests.DynSetInterfaceContains(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceClear(t *testing.T) {
	tests.DynSetInterfaceClear(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceAppendUnique(t *testing.T) {
	tests.DynSetInterfaceAppendUnique(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceUpdateUnique(t *testing.T) {
	tests.DynSetInterfaceUpdateUnique(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfacePop(t *testing.T) {
	tests.DynSetInterfacePop(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfacePopPntr(t *testing.T) {
	tests.DynSetInterfacePopPntr(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceUnorderedEq(t *testing.T) {
	tests.DynSetInterfaceUnorderedEq(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceIntersection(t *testing.T) {
	tests.DynSetInterfaceIntersection(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceUnion(t *testing.T) {
	tests.DynSetInterfaceUnion(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceDifference(t *testing.T) {
	tests.DynSetInterfaceDifference(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceIsSuperset(t *testing.T) {
	tests.DynSetInterfaceIsSuperset(HashSetToSetInterfaceFactory, t)
}

func TestHashSet_DynSetInterfaceIsSubset(t *testing.T) {
	tests.DynSetInterfaceIsSubset(HashSetToSetInterfaceFactory, t)
}
