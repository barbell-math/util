package testenum

// Code generated by ../../../bin/enum - DO NOT EDIT.
import (
	"errors"
	"fmt"
)

var (
	InvalidTestEnum            = errors.New("Invalid TestEnum")
	TEST_ENUM       []TestEnum = []TestEnum{
		UnknownTestEnum,
		OneTestEnum,
		TwoTestEnum,
	}
)

func NewTestEnum() TestEnum {
	return UnknownTestEnum
}

func (o TestEnum) Value() TestEnum {
	return o
}

func (o TestEnum) Valid() error {
	switch o {

	case UnknownTestEnum:
		return nil

	case OneTestEnum:
		return nil

	case TwoTestEnum:
		return nil

	default:
		return InvalidTestEnum
	}
}

func (o TestEnum) String() string {
	switch o {
	case UnknownTestEnum:
		return "unknownTestEnum"
	case OneTestEnum:
		return "oneTestEnum"
	case TwoTestEnum:
		return "twoTestEnum"

	default:
		return "unknownTestEnum"
	}
}

func (o TestEnum) MarshalJSON() ([]byte, error) {
	switch o {

	case UnknownTestEnum:
		return []byte("unknownTestEnum"), nil

	case OneTestEnum:
		return []byte("oneTestEnum"), nil

	case TwoTestEnum:
		return []byte("twoTestEnum"), nil

	default:
		return []byte("unknownTestEnum"), InvalidTestEnum
	}
}

func (o *TestEnum) FromString(s string) error {
	switch s {

	case "unknownTestEnum":
		*o = UnknownTestEnum
		return nil

	case "oneTestEnum":
		*o = OneTestEnum
		return nil

	case "twoTestEnum":
		*o = TwoTestEnum
		return nil

	default:
		*o = UnknownTestEnum
		return fmt.Errorf("%w: %s", InvalidTestEnum, s)
	}
}

func (o *TestEnum) UnmarshalJSON(b []byte) error {
	switch string(b) {

	case "unknownTestEnum":
		*o = UnknownTestEnum
		return nil

	case "oneTestEnum":
		*o = OneTestEnum
		return nil

	case "twoTestEnum":
		*o = TwoTestEnum
		return nil

	default:
		*o = UnknownTestEnum
		return fmt.Errorf("%w: %s", InvalidTestEnum, string(b))
	}
}
