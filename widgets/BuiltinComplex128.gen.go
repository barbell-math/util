package widgets

// Code generated by ../bin/widgetInterfaceImpl - DO NOT EDIT.

import (
	"github.com/barbell-math/util/hash"

	"github.com/barbell-math/util/math/basic"
)

var ()

// A widget to represent the built-in complex128 type
type (
	BuiltinComplex128 struct{}
)

// Returns true if both complex128's are equal. Uses the standard == operator internally.
func (_ BuiltinComplex128) Eq(l *complex128, r *complex128) bool {
	return *l == *r
}

// Provides a hash function for the value that it is wrapping.
func (_ BuiltinComplex128) Hash(v *complex128) hash.Hash {
	return hash.Hash(basic.LossyConv[float64, int64](basic.RealPart[complex128, float64](*v))).
		Combine(hash.Hash(basic.LossyConv[float64, int64](basic.ImaginaryPart[complex128, float64](*v))))

}

// Zeros the supplied value.
func (_ BuiltinComplex128) Zero(other *complex128) {
	*other = (complex128)(0)
}

// Returns the zero value for the complex128 type.
func (_ BuiltinComplex128) ZeroVal() complex128 {
	return complex128(0)
}

// Returns the unit value for the complex128 type.
func (_ BuiltinComplex128) UnitVal() complex128 {
	return complex128(1)
}

// Negates v, updating the value that v points to.
func (_ BuiltinComplex128) Neg(v *complex128) {
	*v = -(*v)
}

// Adds l to r, placing the result in the value that res points to.
func (_ BuiltinComplex128) Add(res *complex128, l *complex128, r *complex128) {
	*res = *l + *r
}

// Subtracts l to r, placing the result in the value that res points to.
func (_ BuiltinComplex128) Sub(res *complex128, l *complex128, r *complex128) {
	*res = *l - *r
}

// Multiplies l to r, placing the result in the value that res points to.
func (_ BuiltinComplex128) Mul(res *complex128, l *complex128, r *complex128) {
	*res = *l * *r
}

// Divides l to r, placing the result in the value that res points to.
func (_ BuiltinComplex128) Div(res *complex128, l *complex128, r *complex128) {
	*res = *l / *r
}
