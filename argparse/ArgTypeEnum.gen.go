package argparse

// Code generated by ../bin/enum - DO NOT EDIT.
import (
	"errors"
	"fmt"
)

var (
	InvalidArgType           = errors.New("Invalid ArgType")
	ARG_TYPE       []ArgType = []ArgType{
		UnknownArgType,
		ValueArgType,
		FlagArgType,
		MultiFlagArgType,
	}
)

func NewArgType() ArgType {
	return UnknownArgType
}

func (o ArgType) Valid() error {
	switch o {

	case UnknownArgType:
		return nil

	case ValueArgType:
		return nil

	case FlagArgType:
		return nil

	case MultiFlagArgType:
		return nil

	default:
		return InvalidArgType
	}
}

func (o ArgType) String() string {
	switch o {
	case UnknownArgType:
		return "UnknownArgType"
	case ValueArgType:
		return "ValueArgType"
	case FlagArgType:
		return "FlagArgType"
	case MultiFlagArgType:
		return "MultiFlagArgType"

	default:
		return "UnknownArgType"
	}
}

func (o ArgType) MarshalJSON() ([]byte, error) {
	switch o {

	case UnknownArgType:
		return []byte("UnknownArgType"), nil

	case ValueArgType:
		return []byte("ValueArgType"), nil

	case FlagArgType:
		return []byte("FlagArgType"), nil

	case MultiFlagArgType:
		return []byte("MultiFlagArgType"), nil

	default:
		return []byte("UnknownArgType"), InvalidArgType
	}
}

func (o *ArgType) FromString(s string) error {
	switch s {

	case "UnknownArgType":
		*o = UnknownArgType
		return nil

	case "ValueArgType":
		*o = ValueArgType
		return nil

	case "FlagArgType":
		*o = FlagArgType
		return nil

	case "MultiFlagArgType":
		*o = MultiFlagArgType
		return nil

	default:
		*o = UnknownArgType
		return fmt.Errorf("%w: %s", InvalidArgType, s)
	}
}

func (o *ArgType) UnmarshalJSON(b []byte) error {
	switch string(b) {

	case "UnknownArgType":
		*o = UnknownArgType
		return nil

	case "ValueArgType":
		*o = ValueArgType
		return nil

	case "FlagArgType":
		*o = FlagArgType
		return nil

	case "MultiFlagArgType":
		*o = MultiFlagArgType
		return nil

	default:
		*o = UnknownArgType
		return fmt.Errorf("%w: %s", InvalidArgType, string(b))
	}
}
