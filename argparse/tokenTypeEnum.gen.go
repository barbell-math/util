package argparse

// Code generated by ../bin/enum - DO NOT EDIT.
import (
	"errors"
	"fmt"
)

var (
	InvalidTokenType             = errors.New("Invalid tokenType")
	TOKEN_TYPE       []tokenType = []tokenType{
		unknownTokenType,
		shortFlagToken,
		longFlagToken,
		argumentToken,
	}
)

func NewTokenType() tokenType {
	return unknownTokenType
}

func (o tokenType) Valid() error {
	switch o {

	case unknownTokenType:
		return nil

	case shortFlagToken:
		return nil

	case longFlagToken:
		return nil

	case argumentToken:
		return nil

	default:
		return InvalidTokenType
	}
}

func (o tokenType) String() string {
	switch o {
	case unknownTokenType:
		return "unknownTokenType"
	case shortFlagToken:
		return "shortFlagToken"
	case longFlagToken:
		return "longFlagToken"
	case argumentToken:
		return "argumentToken"

	default:
		return "unknownTokenType"
	}
}

func (o tokenType) MarshalJSON() ([]byte, error) {
	switch o {

	case unknownTokenType:
		return []byte("unknownTokenType"), nil

	case shortFlagToken:
		return []byte("shortFlagToken"), nil

	case longFlagToken:
		return []byte("longFlagToken"), nil

	case argumentToken:
		return []byte("argumentToken"), nil

	default:
		return []byte("unknownTokenType"), InvalidTokenType
	}
}

func (o *tokenType) FromString(s string) error {
	switch s {

	case "unknownTokenType":
		*o = unknownTokenType
		return nil

	case "shortFlagToken":
		*o = shortFlagToken
		return nil

	case "longFlagToken":
		*o = longFlagToken
		return nil

	case "argumentToken":
		*o = argumentToken
		return nil

	default:
		*o = unknownTokenType
		return fmt.Errorf("%w: %s", InvalidTokenType, s)
	}
}

func (o *tokenType) UnmarshalJSON(b []byte) error {
	switch string(b) {

	case "unknownTokenType":
		*o = unknownTokenType
		return nil

	case "shortFlagToken":
		*o = shortFlagToken
		return nil

	case "longFlagToken":
		*o = longFlagToken
		return nil

	case "argumentToken":
		*o = argumentToken
		return nil

	default:
		*o = unknownTokenType
		return fmt.Errorf("%w: %s", InvalidTokenType, string(b))
	}
}
