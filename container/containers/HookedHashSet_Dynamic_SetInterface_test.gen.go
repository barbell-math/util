package containers

// Code generated by ../../bin/containerInterfaceTests - DO NOT EDIT.
import (
	"testing"
	"github.com/barbell-math/util/container/tests"
	"github.com/barbell-math/util/container/dynamicContainers"
)

func HookedHashSetToSetInterfaceFactory(capacity int) dynamicContainers.Set[int] {
	v := generateHookedHashSet(capacity)
	var rv dynamicContainers.Set[int] = &v
	return rv
}

func TestHookedHashSet_DynSetInterfaceSyncableInterface(t *testing.T) {
	tests.DynSetInterfaceSyncableInterface(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceAddressableInterface(t *testing.T) {
	tests.DynSetInterfaceAddressableInterface(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceLengthInterface(t *testing.T) {
	tests.DynSetInterfaceLengthInterface(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceClearInterface(t *testing.T) {
	tests.DynSetInterfaceClearInterface(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceWriteUniqueOpsInterface(t *testing.T) {
	tests.DynSetInterfaceWriteUniqueOpsInterface(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceReadOpsInterface(t *testing.T) {
	tests.DynSetInterfaceReadOpsInterface(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceDeleteOpsInterface(t *testing.T) {
	tests.DynSetInterfaceDeleteOpsInterface(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_ReadDynSetInterface(t *testing.T) {
	tests.ReadDynSetInterface(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_WriteDynSetInterface(t *testing.T) {
	tests.WriteDynSetInterface(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceInterface(t *testing.T) {
	tests.DynSetInterfaceInterface(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceStaticCapacityInterface(t *testing.T) {
	tests.DynSetInterfaceStaticCapacityInterface(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceVals(t *testing.T) {
	tests.DynSetInterfaceVals(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceValPntrs(t *testing.T) {
	tests.DynSetInterfaceValPntrs(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceContainsPntr(t *testing.T) {
	tests.DynSetInterfaceContainsPntr(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceGetUnique(t *testing.T) {
	tests.DynSetInterfaceGetUnique(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceContains(t *testing.T) {
	tests.DynSetInterfaceContains(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceClear(t *testing.T) {
	tests.DynSetInterfaceClear(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceAppendUnique(t *testing.T) {
	tests.DynSetInterfaceAppendUnique(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceUpdateUnique(t *testing.T) {
	tests.DynSetInterfaceUpdateUnique(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfacePop(t *testing.T) {
	tests.DynSetInterfacePop(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfacePopPntr(t *testing.T) {
	tests.DynSetInterfacePopPntr(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceUnorderedEq(t *testing.T) {
	tests.DynSetInterfaceUnorderedEq(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceIntersection(t *testing.T) {
	tests.DynSetInterfaceIntersection(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceUnion(t *testing.T) {
	tests.DynSetInterfaceUnion(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceDifference(t *testing.T) {
	tests.DynSetInterfaceDifference(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceIsSuperset(t *testing.T) {
	tests.DynSetInterfaceIsSuperset(HookedHashSetToSetInterfaceFactory, t)
}

func TestHookedHashSet_DynSetInterfaceIsSubset(t *testing.T) {
	tests.DynSetInterfaceIsSubset(HookedHashSetToSetInterfaceFactory, t)
}
